{"version":3,"sources":["literal.ts"],"names":["LiteralTranspiler","LiteralTranspiler.constructor","LiteralTranspiler.visitNode","LiteralTranspiler.escapeTextForTemplateString"],"mappings":";;;;;;AAAA,AACA,uEADuE;AACvE,IAAO,EAAE,WAAW,YAAY,CAAC,CAAC;AAClC,IAAO,IAAI,WAAW,QAAQ,CAAC,CAAC;AAGhC;IAAgCA,qCAAmBA;IACjDA,2BAAYA,EAAsBA;QAAIC,kBAAMA,EAAEA,CAACA,CAACA;IAACA,CAACA;IAElDD,qCAASA,GAATA,UAAUA,IAAaA;QACrBE,MAAMA,CAACA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA,CAACA;YAClBA,AACAA,YADYA;iBACPA,sBAA4BA;gBAC/BA,IAAIA,IAAIA,GAAyBA,IAAIA,CAACA;gBACtCA,IAAIA,CAACA,IAAIA,CAACA,IAAIA,CAACA,OAAOA,EAAEA,CAACA,CAACA;gBAC1BA,KAAKA,CAACA;YACRA,KAAKA,qBAA2BA;gBAC9BA,IAAIA,IAAIA,GAAyBA,IAAIA,CAACA;gBACtCA,IAAIA,IAAIA,GAAGA,IAAIA,CAACA,SAASA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA;gBACrCA,AACAA,0EAD0EA;oBACtEA,IAAIA,GAAGA,IAAIA,CAACA,OAAOA,CAACA,IAAIA,EAAEA,KAAKA,CAACA,CAACA;gBACrCA,IAAIA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA;gBAChBA,KAAKA,CAACA;YACRA,KAAKA,sCAA2CA;gBAC9CA,IAAIA,CAACA,IAAIA,CAACA,QAAMA,IAAIA,CAACA,2BAA2BA,CAACA,IAAIA,CAACA,QAAKA,CAACA,CAACA;gBAC7DA,KAAKA,CAACA;YACRA,KAAKA,uBAA4BA;gBAC/BA,IAAIA,CAACA,WAAWA,CAACA,IAAIA,CAACA,2BAA2BA,CAACA,IAAIA,CAACA,CAACA,CAACA;gBACzDA,KAAKA,CAACA;YACRA,KAAKA,4BAAgCA;gBACnCA,IAAIA,IAAIA,GAA0BA,IAAIA,CAACA;gBACvCA,EAAEA,CAACA,CAACA,IAAIA,CAACA,IAAIA,CAACA;oBAACA,IAAIA,CAACA,KAAKA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA;gBACrCA,EAAEA,CAACA,CAACA,IAAIA,CAACA,aAAaA,CAACA;oBAACA,IAAIA,CAACA,SAASA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA;gBAC3DA,KAAKA,CAACA;YACRA,KAAKA,qBAA0BA;gBAC7BA,IAAIA,CAACA,IAAIA,CAACA,QAAMA,IAAIA,CAACA,2BAA2BA,CAACA,IAAIA,CAAGA,CAACA,EAAEA,oBAAoBA;gBAC/EA,KAAKA,CAACA;YACRA,KAAKA,qBAA0BA;gBAC7BA,IAAIA,CAACA,WAAWA,CAACA,IAAIA,CAACA,2BAA2BA,CAACA,IAAIA,CAACA,CAACA,CAACA;gBACzDA,IAAIA,CAACA,WAAWA,CAACA,KAAKA,CAACA,CAACA;gBACxBA,KAAKA,CAACA;YACRA,KAAKA,sBAA0BA;gBAC7BA,IAAIA,IAAIA,GAAoBA,IAAIA,CAACA;gBACjCA,EAAEA,CAACA,CAACA,IAAIA,CAACA,UAAUA,CAACA,CAACA,CAACA;oBACpBA,AACAA,0DAD0DA;oBAC1DA,IAAIA,CAACA,WAAWA,CAACA,IAAIA,CAACA,CAACA;oBACvBA,IAAIA,CAACA,KAAKA,CAACA,IAAIA,CAACA,UAAUA,CAACA,CAACA;oBAC5BA,IAAIA,CAACA,WAAWA,CAACA,GAAGA,CAACA,CAACA;gBACxBA,CAACA;gBACDA,EAAEA,CAACA,CAACA,IAAIA,CAACA,OAAOA,CAACA;oBAACA,IAAIA,CAACA,KAAKA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA;gBAC3CA,KAAKA,CAACA;YACRA,KAAKA,gCAAoCA;gBACvCA,EAAEA,CAACA,CAACA,IAAIA,CAACA,WAAWA,CAACA,IAAIA,EAAEA,mBAAuBA,CAACA,CAACA;oBAACA,IAAIA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA;gBACxEA,IAAIA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;gBACfA,IAAIA,CAACA,SAASA,CAA6BA,IAAKA,CAACA,QAAQA,CAACA,CAACA;gBAC3DA,IAAIA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;gBACfA,KAAKA,CAACA;YACRA,KAAKA,iCAAqCA;gBACxCA,EAAEA,CAACA,CAACA,IAAIA,CAACA,WAAWA,CAACA,IAAIA,EAAEA,mBAAuBA,CAACA,CAACA;oBAACA,IAAIA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA;gBACxEA,IAAIA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;gBACfA,IAAIA,CAACA,SAASA,CAA8BA,IAAKA,CAACA,UAAUA,CAACA,CAACA;gBAC9DA,IAAIA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;gBACfA,KAAKA,CAACA;YACRA,KAAKA,4BAAgCA;gBACnCA,IAAIA,UAAUA,GAA0BA,IAAIA,CAACA;gBAC7CA,EAAEA,CAACA,CAACA,UAAUA,CAACA,IAAIA,CAACA,IAAIA,KAAKA,mBAAwBA,CAACA,CAACA,CAACA;oBACtDA,AACAA,iDADiDA;oBACjDA,IAAIA,CAACA,WAAWA,CAACA,IAAIA,CAACA,CAACA;oBACvBA,IAAIA,CAACA,WAAWA,CAAiBA,UAAUA,CAACA,IAAKA,CAACA,IAAIA,CAACA,CAACA;oBACxDA,IAAIA,CAACA,WAAWA,CAACA,GAAGA,CAACA,CAACA;gBACxBA,CAACA;gBAACA,IAAIA,CAACA,CAACA;oBACNA,IAAIA,CAACA,KAAKA,CAACA,UAAUA,CAACA,IAAIA,CAACA,CAACA;gBAC9BA,CAACA;gBACDA,IAAIA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;gBACfA,IAAIA,CAACA,KAAKA,CAACA,UAAUA,CAACA,WAAWA,CAACA,CAACA;gBACnCA,KAAKA,CAACA;YACRA,KAAKA,qCAAyCA;gBAC5CA,IAAIA,SAASA,GAAmCA,IAAIA,CAACA;gBACrDA,IAAIA,CAACA,WAAWA,CAACA,IAAIA,CAACA,CAACA;gBACvBA,IAAIA,CAACA,WAAWA,CAACA,SAASA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA;gBACtCA,IAAIA,CAACA,WAAWA,CAACA,GAAGA,CAACA,CAACA;gBACtBA,IAAIA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;gBACfA,IAAIA,CAACA,KAAKA,CAACA,SAASA,CAACA,IAAIA,CAACA,CAACA;gBAC3BA,KAAKA,CAACA;YAERA,KAAKA,oBAAyBA;gBAC5BA,IAAIA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA;gBAClBA,KAAKA,CAACA;YACRA,KAAKA,qBAA0BA;gBAC7BA,IAAIA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA;gBACnBA,KAAKA,CAACA;YACRA,KAAKA,oBAAyBA;gBAC5BA,IAAIA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA;gBAClBA,KAAKA,CAACA;YACRA,KAAKA,gCAAsCA;gBACzCA,IAAIA,CAACA,IAAIA,CAAwBA,IAAKA,CAACA,IAAIA,CAACA,CAACA;gBAC7CA,KAAKA,CAACA;YACRA,KAAKA,oBAAyBA;gBAC5BA,IAAIA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA;gBAClBA,KAAKA,CAACA;YAERA;gBACEA,MAAMA,CAACA,KAAKA,CAACA;QACjBA,CAACA;QACDA,MAAMA,CAACA,IAAIA,CAACA;IACdA,CAACA;IAEOF,uDAA2BA,GAAnCA,UAAoCA,CAAUA;QAC5CG,MAAMA,CAAoBA,CAAEA,CAACA,IAAIA,CAACA,OAAOA,CAACA,KAAKA,EAAEA,MAAMA,CAACA,CAACA,OAAOA,CAACA,SAASA,EAAEA,MAAMA,CAACA,CAACA;IACtFA,CAACA;IACHH,wBAACA;AAADA,CAxGA,AAwGCA,EAxG+B,IAAI,CAAC,cAAc,EAwGlD;AAED,AAA2B,iBAAlB,iBAAiB,CAAC","file":"literal.js","sourceRoot":"/Users/vsavkin/projects/ts2dart/","sourcesContent":["/// <reference path='../node_modules/typescript/bin/typescript.d.ts' />\nimport ts = require('typescript');\nimport base = require('./base');\nimport ts2dart = require('./main');\n\nclass LiteralTranspiler extends base.TranspilerStep {\n  constructor(tr: ts2dart.Transpiler) { super(tr); }\n\n  visitNode(node: ts.Node): boolean {\n    switch (node.kind) {\n      // Literals.\n      case ts.SyntaxKind.NumericLiteral:\n        var sLit = <ts.LiteralExpression>node;\n        this.emit(sLit.getText());\n        break;\n      case ts.SyntaxKind.StringLiteral:\n        var sLit = <ts.LiteralExpression>node;\n        var text = JSON.stringify(sLit.text);\n        // Escape dollar sign since dart will interpolate in double quoted literal\n        var text = text.replace(/\\$/, '\\\\$');\n        this.emit(text);\n        break;\n      case ts.SyntaxKind.NoSubstitutionTemplateLiteral:\n        this.emit(`'''${this.escapeTextForTemplateString(node)}'''`);\n        break;\n      case ts.SyntaxKind.TemplateMiddle:\n        this.emitNoSpace(this.escapeTextForTemplateString(node));\n        break;\n      case ts.SyntaxKind.TemplateExpression:\n        var tmpl = <ts.TemplateExpression>node;\n        if (tmpl.head) this.visit(tmpl.head);\n        if (tmpl.templateSpans) this.visitEach(tmpl.templateSpans);\n        break;\n      case ts.SyntaxKind.TemplateHead:\n        this.emit(`'''${this.escapeTextForTemplateString(node)}`); //highlighting bug:'\n        break;\n      case ts.SyntaxKind.TemplateTail:\n        this.emitNoSpace(this.escapeTextForTemplateString(node));\n        this.emitNoSpace(`'''`);\n        break;\n      case ts.SyntaxKind.TemplateSpan:\n        var span = <ts.TemplateSpan>node;\n        if (span.expression) {\n          // Do not emit extra whitespace inside the string template\n          this.emitNoSpace('${');\n          this.visit(span.expression);\n          this.emitNoSpace('}');\n        }\n        if (span.literal) this.visit(span.literal);\n        break;\n      case ts.SyntaxKind.ArrayLiteralExpression:\n        if (this.hasAncestor(node, ts.SyntaxKind.Decorator)) this.emit('const');\n        this.emit('[');\n        this.visitList((<ts.ArrayLiteralExpression>node).elements);\n        this.emit(']');\n        break;\n      case ts.SyntaxKind.ObjectLiteralExpression:\n        if (this.hasAncestor(node, ts.SyntaxKind.Decorator)) this.emit('const');\n        this.emit('{');\n        this.visitList((<ts.ObjectLiteralExpression>node).properties);\n        this.emit('}');\n        break;\n      case ts.SyntaxKind.PropertyAssignment:\n        var propAssign = <ts.PropertyAssignment>node;\n        if (propAssign.name.kind === ts.SyntaxKind.Identifier) {\n          // Dart identifiers in Map literals need quoting.\n          this.emitNoSpace(' \"');\n          this.emitNoSpace((<ts.Identifier>propAssign.name).text);\n          this.emitNoSpace('\"');\n        } else {\n          this.visit(propAssign.name);\n        }\n        this.emit(':');\n        this.visit(propAssign.initializer);\n        break;\n      case ts.SyntaxKind.ShorthandPropertyAssignment:\n        var shorthand = <ts.ShorthandPropertyAssignment>node;\n        this.emitNoSpace(' \"');\n        this.emitNoSpace(shorthand.name.text);\n        this.emitNoSpace('\"');\n        this.emit(':');\n        this.visit(shorthand.name);\n        break;\n\n      case ts.SyntaxKind.TrueKeyword:\n        this.emit('true');\n        break;\n      case ts.SyntaxKind.FalseKeyword:\n        this.emit('false');\n        break;\n      case ts.SyntaxKind.NullKeyword:\n        this.emit('null');\n        break;\n      case ts.SyntaxKind.RegularExpressionLiteral:\n        this.emit((<ts.LiteralExpression>node).text);\n        break;\n      case ts.SyntaxKind.ThisKeyword:\n        this.emit('this');\n        break;\n\n      default:\n        return false;\n    }\n    return true;\n  }\n\n  private escapeTextForTemplateString(n: ts.Node): string {\n    return (<ts.StringLiteral>n).text.replace(/\\\\/g, '\\\\\\\\').replace(/([$'])/g, '\\\\$1');\n  }\n}\n\nexport = LiteralTranspiler;"]}