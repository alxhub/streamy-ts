{
  "name": "systemjs-builder",
  "version": "0.10.6",
  "description": "SystemJS Build Tool",
  "main": "index.js",
  "dependencies": {
    "glob": "^5.0.3",
    "mkdirp": "^0.5.0",
    "rsvp": "^3.0.17",
    "source-map": "^0.4.1",
    "systemjs": "^0.16.9",
    "traceur": "0.0.88",
    "uglify-js": "^2.4.17"
  },
  "devDependencies": {
    "babel-core": "^5.0.12",
    "es6-module-loader": "^0.16.5",
    "mocha": "~2.0.0",
    "chai": "^1.10.0"
  },
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/systemjs/builder.git"
  },
  "scripts": {
    "test:accept-source-maps": "UPDATE_EXPECTATIONS=true mocha test/sourcemaps.js",
    "test:traceur": "cd test && node run-build.js && open test-build.html && open test-sfx.html",
    "test:babel": "cd test && node run-build.js babel && open test-build.html && open test-sfx.html",
    "test": "mocha"
  },
  "author": "",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/systemjs/builder/issues"
  },
  "homepage": "https://github.com/systemjs/builder",
  "readme": "SystemJS Build Tool [![Build Status][travis-image]][travis-url]\n===\n\n_For upgrading to 0.10, [see the release notes here](https://github.com/systemjs/builder/releases/tag/0.10.0)._\n\nProvides a single-file build for SystemJS of mixed-dependency module trees.\n\nBuilds ES6 into ES5, CommonJS, AMD and globals into a single file in a way that supports the CSP SystemJS loader\nas well as circular references.\n\nExample\n---\n\napp.js\n```javascript\nimport $ from \"./jquery\";\nexport var hello = 'es6';\n```\n\njquery.js\n```javascript\ndefine(function() {\n  return 'this is jquery';\n});\n```\n\nWill build the module `app` into a bundle containing both `app` and `jquery` defined through `System.register` calls.\n\nCircular references and bindings in ES6, CommonJS and AMD all behave exactly as they should, including maintaining execution order.\n\nUsage\n---\n\n### Install\n\n```javascript\nnpm install systemjs-builder\n```\n\n### Basic Use\n\nEnsure that the transpiler is installed separately (`npm install babel-core` here).\n\n```javascript\nvar path = require(\"path\");\nvar Builder = require('systemjs-builder');\n\nvar builder = new Builder({\n  baseURL: 'file:' + path.resolve('some/folder'),\n\n  // any map config\n  map: {\n    jquery: 'jquery-1.2.3/jquery'\n  },\n  \n  // opt in to Babel for transpiling over Traceur\n  transpiler: 'babel'\n\n  // etc. any SystemJS config\n})\n.build('myModule', 'outfile.js')\n.then(function() {\n  console.log('Build complete');\n})\n.catch(function(err) {\n  console.log('Build error');\n  console.log(err);\n});\n```\n\n### Setting Configuration\n\nTo load a SystemJS configuration file, containing configure calls like:\n\n```javascript\nSystem.config({ ... });\n```\n\nThen we can load this config file through the builder:\n\n```javascript\n// `builder.loadConfig` will load config from a file\nbuilder.loadConfig('./cfg.js')\n.then(function() {\n  // additional config can also be set through `builder.config`\n  builder.config({ baseURL: 'file:' + process.cwd() });\n\n  return builder.build('myModule', 'outfile.js');\n});\n\n```\n\nMultiple config calls can be run, which will combine into the loader configuration.\n\nTo reset the loader state and configuration use `builder.reset()`.\n\n### Self-Executing (SFX) Bundles\n\nTo make a bundle that is independent of the SystemJS loader entirely, we can make SFX bundles:\n\n```javascript\nbuilder.buildSFX('myModule', 'outfile.js', options);\n```\n\nThis bundle file can then be included with a `<script>` tag, and no other dependencies would need to be included in the page. \n\nBy default, Traceur or Babel runtime are automatically included in the SFX bundle if needed. To exclude the Babel or Traceur runtime set the `runtime` build option to false:\n\n```javascript\nbuilder.buildSFX('myModule', 'outfile.js', { runtime: false });\n```\n\n#### Adapter Modules\n\nTo have globals like `jQuery` not included, and included in a separate script tag, set up an adapter module something like:\n\njquery.js\n```javascript\nmodule.exports = window.jQuery;\n```\n\n### Minfication & Source Maps\n\nAs well as an `options.config` parameter, it is also possible to specify minification and source maps options:\n\n```javascript\nbuilder.build('myModule', 'outfile.js', { minify: true, sourceMaps: true, config: cfg });\n```\n\nCompile time with source maps can also be improved with the `lowResSourceMaps` option:\n\n```javascript\nbuilder.build('myModule', 'outfile.js', { sourceMaps: true, lowResSourceMaps: true });\n```\n\n#### Minification Options\n\n* `mangle`, defaults to true.\n* `globalDefs`, object allowing for global definition assignments for dead code removal.\n\n```javascript\nbuilder.build('myModule', 'outfile.js', { minify: true, mangle: false, globalDefs: { DEBUG: false } });\n```\n\n### In-Memory Builds\n\nLeave out the `outFile` option to run an in-memory build:\n\n```javascript\nbuilder.build('myModule', { minify: true }).then(function(output) {\n  output.source;    // generated bundle source\n  output.sourceMap; // generated bundle source map\n  output.modules;   // array of module names defined in the bundle\n});\n```\n\nThe `output` object above is provided for all builds, including when `outFile` is set.\n\n`output.modules` can be used to directly populate SystemJS bundles configuration.\n\n### Ignore Resources\n\nIf loading resources that shouldn't even be traced as part of the build (say an external import), these\ncan be configured with:\n\n```javascript\nSystem.meta['resource/to/ignore'] = {\n  build: false\n};\n```\n\n### Bundle Arithmetic\n\nBoth `builder.build` and `builder.buildSFX` support bundle arithmetic expressions. This allows for the easy construction of custom bundles.\n\nThere is also a `builder.trace` and `builder.buildTree` for building direct trace tree objects.\n\n#### Example - Arithmetic Expressions\n\nIn this example we build all our application code in `app/` excluding the tree `app/corelibs`:\n\n```javascript\nvar Builder = require('systemjs-builder');\n\nvar builder = new Builder({\n  baseURL: '...',\n  map: {\n  } // etc. config\n});\n\nbuilder.build('app/* - app/corelibs', 'output-file.js', { minify: true, sourceMaps: true });\n```\n\n#### Example - Common Bundles\n\nBuild a bundle for the dependencies of `app/` excluding anything from `app/` itself.\n\nFor this we can use the `[module]` syntax which represents a single module instead of all its dependencies as well:\n\n```javascript\nbuilder.build('app/**/* - [app/**/*]', 'common.js', { minify: true, sourceMaps: true });\n```\n\nThe above means _take the tree of app and all its dependencies, and subtract just the modules in app_.\n\nWe can then exclude this common bundle in future builds:\n\n```javascript\nbuilder.build('app/componentA - common', { minify: true, sourceMaps: true });\n```\n\n#### Example - Direct Trace API\n\nInstead of using the arithmetic syntax, we can construct the trace ourselves.\n\nIn this example we build `app/first` and `app/second` into two separate bundles, while creating a separate shared bundle:\n\n```javascript\nvar Builder = require('systemjs-builder');\n\nvar builder = new Builder({\n  // ...\n});\n\nPromise.all([builder.trace('app/first'), builder.trace('app/second')])\n.then(function(trees) {\n  var commonTree = builder.intersectTrees(trees[0], trees[1]);\n  return Promise.all([\n    builder.buildTree(commonTree, 'shared-bundle.js')\n    builder.buildTree(builder.subtractTrees(trees[0], commonTree), 'first-bundle.js'),\n    builder.buildTree(builder.subtractTrees(trees[1], commonTree), 'second-bundle.js')\n  ]);\n});\n```\n\nLicense\n---\n\nMIT\n\n[travis-url]: https://travis-ci.org/systemjs/builder\n[travis-image]: https://travis-ci.org/systemjs/builder.svg?branch=master\n",
  "readmeFilename": "README.md",
  "_id": "systemjs-builder@0.10.6",
  "_shasum": "22961d06718739826fbcde7c4f250a60f46ec807",
  "_resolved": "https://registry.npmjs.org/systemjs-builder/-/systemjs-builder-0.10.6.tgz",
  "_from": "https://registry.npmjs.org/systemjs-builder/-/systemjs-builder-0.10.6.tgz"
}
