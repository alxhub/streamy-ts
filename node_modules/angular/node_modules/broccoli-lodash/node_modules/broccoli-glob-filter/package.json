{
  "name": "broccoli-glob-filter",
  "version": "0.1.2",
  "description": "Base class for broccoli plugins that processes files one by one.",
  "main": "index.js",
  "scripts": {
    "test": "mocha tests"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/sunflowerdeath/broccoli-glob-filter.git"
  },
  "keywords": [
    "broccoli-plugin"
  ],
  "author": {
    "name": "sunflowerdeath"
  },
  "license": "public domain",
  "dependencies": {
    "dirmatch": "^0.1.1",
    "mkdirp": "^0.5.0",
    "q": "^1.1.2",
    "quick-temp": "^0.1.2",
    "symlink-or-copy": "^1.0.1",
    "underscore": "^1.7.0"
  },
  "devDependencies": {
    "broccoli": "^0.13.3",
    "fs-extra": "^0.14.0",
    "sinon": "^1.12.2"
  },
  "readme": "# broccoli-glob-filter\n\nBase class for broccoli plugins that processes files one by one.\n\nFeatures:\n\n* It stores results in the cache and rebuilds only changed files.\n* It supports glob patterns to specify files to filter.\n\n## Install\n\n```\nnpm install broccoli-glob-filter\n```\n\n## Usage\n\n```js\nvar Filter = require('broccoli-glob-filter')\n\nvar MyFilter = function(inputTree, options) {\n  Filter.apply(this, arguments)\n}\nMyFilter.prototype = Object.create(Filter.prototype)\nMyFilter.processFileContent = function(content, relPath, srcDir) {\n  return 'content of filtered file'\n\n  // You can return an array, when you need to create more than one file,\n  // or to set special path of a file.\n  return [\n    {\n      path: 'path/of/new/file',\n      content: 'content'\n    }\n  ]\n}\n```\n\n## API\n\n### Filter(inputTree, [options])\n\nConstructor.\n\n#### inputTree\n\nType: `Tree`\n\n#### options\n\nType: `object`\n\n### List of options\n\n#### files\n\nType: `array.<string>`\n<br>\nDefault: `['**']`\n\nGlob patterns for filtered files.\n\n#### targetExtension\n\nType: `string`\n\nNew extension of filtered files.\n\n#### changeFileName\n\nType: `function(string) -> string`\n\nFunction that is called for every file with its filename and should\nreturn new filename of the filtered file.\n<br>\nWhen this function is specified, option `targetExtension` doesn't work.\n\n### Filter.processFileContent(content, relPath, srcDir)\n\nReturns: `string|array.<object>`\n\nThis method must be implemented in the inherited class.\nIt processes content of each file from the `inputTree` that matches patterns\nand returns content of the new file.\n\nIf you need to create more than one file, or to set special path of a file,\nyou can return an array of file objects with the following properties:\n* `path` &ndash; relative path of the new file.\n* `content` &ndash; content of the new file.\n\nIf you want to process a file asynchronously, you can return a promise.\n\n#### content\n\nType: `string`\n\nContent of source file.\n\n#### relPath\n\nType: `string`\n\nRelative path of source file.\n\n#### srcDir\n\nType: `string`\n\nPath of the `inputTree`.\nYou can use it, when you need to read additional files from tree.\n\n## License\n\nPublic domain, see the `LICENCE.md` file.\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/sunflowerdeath/broccoli-glob-filter/issues"
  },
  "homepage": "https://github.com/sunflowerdeath/broccoli-glob-filter#readme",
  "_id": "broccoli-glob-filter@0.1.2",
  "_shasum": "6fe806894bd76eb5a66d45456aeccc132965c226",
  "_resolved": "https://registry.npmjs.org/broccoli-glob-filter/-/broccoli-glob-filter-0.1.2.tgz",
  "_from": "https://registry.npmjs.org/broccoli-glob-filter/-/broccoli-glob-filter-0.1.2.tgz"
}
